<!--android notes
//Android Views
	TextView : shows text
	ImageView : shows image
	Button : displays button
	
	Example TextView xml within a LinearLayout
-->
<LinearLayout
	<!-- values below are attributes and :attributevalues -->
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:orientation="vertical">
	<!--linearlayout parameters go within the first> and will close out later with a </LinearLayout>-->
	<TextView
		android:text="Happy Birthday!"
		android:background="@android:color/darker_gray"
		android:textColor="@android:color/white"
		android:layout_width="150dp"
		android:layout_height="75dp" />
	<TextView
		android:text="You're the best!"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content" />
	
</LinearLayout>

<!-- Density-Independent Pixels (dp prounounced dip) are used to maintain size when 
		used on varying resolutions 2dp x 2dp is the same on all devices
		
	**General rule of thumb is to make touch targets atleast 48dp**
	
	use sp for font size / based on user preference for font size in settings
	reference google material design principles for font sizes color etc etc
	https://material.io/guidelines/style/typography.html#typography-styles
	https://material.io/guidelines/style/color.html#color-color-palette
	
	
	ImageView Notes
-->
<LinearLayout
	android:layout_width="wrap_content"
	android:layout_height="wrap_content"
	android:orientation="vertical">
	<!--src notes drawable folder / image name 
		scaleType : center (centers but doesn't crop or scale // centerCrop centers and scales to fit\
		match_parent is also usable for width/height-->
	<ImageView
		android:src="@drawable/cake"
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:scaleType="centerCrop"/>

</LinearLayout>

<!--View Group Notes
		LinearLayout - content aligned in vertical or horizontal colum / row
		Relative Layout - child positions are relative to parent layout or other children layouts 

 -->

 <RelativeLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	android:layout_height="match_parent"
	android:layout_width="match_parent">
	
	<TextView
		android:layout_width="wrap_content"
		android:layout_height="wrap_content"
		android:layout_alignParentRight="true"
		android:layout_alignParentTop="true"
		android:textAppearance="?android:textAppearanceLarge"
		android:text="Happy" />
		
		
    <TextView
        android:id="@+id/me_text_view"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_toRightOf="@id/lyla_text_view"
        android:textSize="24sp"
        android:text="Me" />
		
</RelativeLayout>


<!-- examples of id + relative layouts -->
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" >

    <ImageView
        android:id="@+id/pic"
        android:layout_width="56dp"
        android:layout_height="56dp"
        android:scaleType="centerCrop"
        android:src="@drawable/ocean" />

    <TextView
        android:id="@+id/pebble"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Pebble Beach"
        android:textAppearance="?android:textAppearanceMedium"
        android:layout_toRightOf="@id/pic" />

    <TextView
        android:id="@+id/calif"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="California"
        android:layout_toRightOf="@id/pic"
        android:layout_below="@id/pebble"
        android:textAppearance="?android:textAppearanceSmall" />

    <TextView
        
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="10 miles away"
        android:layout_toRightOf="@id/pic" 
        android:layout_below="@id/calif"
        
        android:textAppearance="?android:textAppearanceSmall" />

</RelativeLayout>

<!-- Padding and Margin Notes
Padding is handled by TextView
Margin is handled by ViewGroup

android:padding="8dp"
can use paddingLeft paddingTop etc
examples of padding / margin
-->

<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <ImageView
        android:src="@drawable/ocean"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:scaleType="centerCrop" />

    <TextView
        android:text="You're invited!"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="@android:color/white"
        android:paddingLeft="16dp"
    	android:paddingRight="16dp"
    	android:paddingTop="16dp"
    	android:paddingBottom="8dp"
        android:textSize="45sp"
        android:background="#009688"/>

    <TextView
        android:text="Bonfire at the beach"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:textColor="@android:color/white"
        android:paddingLeft="16dp"
        android:paddingBottom="16dp"
        android:textSize="24sp"
        android:background="#009688"/>

</LinearLayout>

<!--Button notes and onClick

-->

<Button
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Order"
    android:onClick="submitOrder"/>
	
<!-- then in the main activity you'd have
 public void submitOrder(View view) {
        display(1);
    }

    /**
     * This method displays the given quantity value on the screen.
     */
    private void display(int number) {
        TextView quantityTextView = (TextView) findViewById(R.id.quantity_text_view);
        quantityTextView.setText("" + number);
    }
-->

Breakpoints / debug informalequation
https://developer.android.com/studio/debug/index.html?utm_source=udacity&utm_medium=course&utm_campaign=android_basics


view layouts can be nested

calling methods on objects:
change textview text color:
	nameoftextview.setTextColor(Color.RED);
	
	
using styles in android

<resources>
	<style name="BaseTheme">
		<item name="android:textSize">30sp</item>
		<item name="android:textStyle">italic</item>
	</style>

//then in activity_main.xml - add a line in the view for style="@style/BaseTheme"

styles are applied to a view
themes are applied to entire application and activity

Style examples

<resources>

    <!-- Base application theme. -->
    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
        <!-- Customize your theme here. -->
        <item name="colorPrimary">#3F51B5</item>
        <item name="colorPrimaryDark">#303F9F</item>
        <item name="colorAccent">#00BCD4</item>
        <item name="textColorPrimary">#212121</item>
        <item name="textColorSecondary">#757575</item>
    </style>

    <style name="HeaderTextStyle">
        <item name="android:layout_width">wrap_content</item>
        <item name="android:layout_height">48dp</item>
        <item name="android:gravity">center_vertical</item>
        <item name="android:textAllCaps">true</item>
        <item name="android:textSize">15sp</item>
    </style>

</resources>

	